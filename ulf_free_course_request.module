<?php
/**
 * @file
 * Code for the Ulf free course request feature.
 */

include_once 'ulf_free_course_request.features.inc';
include_once 'ulf_free_course_request.permissions.inc';
include_once 'ulf_free_course_request.backend.inc';
include_once 'ulf_free_course_request.actions.inc';
include_once 'ulf_free_course_request.mail.inc';
include_once 'ulf_free_course_request.form_alterations.inc';

/**
 * Implements hook_menu().
 */
function ulf_free_course_request_menu() {
  $items = array();

  $items['admin/config/system/free_course_request/requests'] = array(
    'title' => 'Financing requests',
    'type' => MENU_DEFAULT_LOCAL_TASK,
    'weight' => -10,
  );

  $items['admin/config/system/free_course_request/config'] = array(
    'title' => 'Config / Help texts',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('ulf_free_course_request_form_backend'),
    'type' => MENU_LOCAL_TASK,
    'access arguments' => array('administer ulf free course request settings'),
    'file' => 'ulf_free_course_request.backend.inc',
    'file path' => drupal_get_path('module', 'ulf_free_course_request'),
  );

  return $items;
}

/**
 * Implements hook_block_info().
 */
function ulf_free_course_request_block_info()
{
  $blocks['free_course_request_summary'] = [
    'info' => 'Ansøgninger opsummering',
  ];
  return $blocks;
}

/**
 * Implements hook_block_view().
 */
function ulf_free_course_request_block_view($delta = '') {
  if ($delta == 'free_course_request_summary') {
    $block['subject'] = null;
    $block['content'] = '<style>#block-ulf-free-course-request-free-course-request-summary{float:right;}</style>';

    $requested_amount = 0;
    $granted_amount = 0;
    $spent_amount = 0;

    $params = drupal_get_query_parameters();
    $query = db_select('entityform', 'e');
    $query->leftJoin('field_data_field_rfc_requested_amount', 'ra', 'e.entityform_id = ra.entity_id');
    $query->leftJoin('field_data_field_rfc_granted_amount', 'ga', 'e.entityform_id = ga.entity_id');
    $query->leftJoin('field_data_field_rfc_spent_amount', 'sa', 'e.entityform_id = sa.entity_id');

    $query->condition('e.type', 'free_course_request');
    if(isset($params['field_rfc_date_value']) || isset($params['field_rfc_date_value_1'])) {
      $query->leftJoin('field_data_field_rfc_date', 'd', 'e.entityform_id = d.entity_id');
      if(isset($params['field_rfc_date_value']['value']['date']) && $params['field_rfc_date_value']['value']['date'] != '') {
        $parts = explode('/', $params['field_rfc_date_value']['value']['date']);
        $time = strtotime($parts[2].$parts[1].$parts[0]);
        if($time > 0) {
          $query->condition('d.field_rfc_date_value', $time, '>');
        }
      }
      if(isset($params['field_rfc_date_value_1']['value']['date']) && $params['field_rfc_date_value_1']['value']['date'] != '') {
        $parts = explode('/', $params['field_rfc_date_value_1']['value']['date']);
        $time = strtotime($parts[2].$parts[1].$parts[0]);
        if($time > 0) {
          $query->condition('d.field_rfc_date_value', $time, '<');
        }
      }
    }
    if(isset($params['field_rfc_status_value']) && $params['field_rfc_status_value'] != 'All') {
      $query->leftJoin('field_data_field_rfc_status', 's', 'e.entityform_id = s.entity_id');
      $query->condition('s.field_rfc_status_value', $params['field_rfc_status_value'], '=');
    }
    $uid = arg(3);
    if($uid && $uid > 0) {
      $query->leftJoin('field_data_field_rfc_school', 'field_data_field_rfc_school_filter', 'e.entityform_id = field_data_field_rfc_school_filter.entity_id');
      $query->condition('field_data_field_rfc_school_filter.field_rfc_school_target_id', $uid);
    }

    if(isset($params['combine']) && $params['combine'] != '') {

      $query->leftJoin('field_data_field_rfc_name', 'field_data_field_rfc_name', 'e.entityform_id = field_data_field_rfc_name.entity_id');
      $query->leftJoin('field_data_field_rfc_school', 'field_data_field_rfc_school', 'e.entityform_id = field_data_field_rfc_school.entity_id');
      $query->leftJoin('users', 'users_field_data_field_rfc_school', 'field_data_field_rfc_school.field_rfc_school_target_id = users_field_data_field_rfc_school.uid');
      $query->leftJoin('field_data_field_profile_name', 'users_field_data_field_rfc_school__field_data_field_profile_name', 'users_field_data_field_rfc_school.uid = users_field_data_field_rfc_school__field_data_field_profile_name.entity_id');
      $query->leftJoin('field_data_field_rfc_provider', 'field_data_field_rfc_provider', 'e.entityform_id = field_data_field_rfc_provider.entity_id');
      $query->leftJoin('users', 'users_field_data_field_rfc_provider', 'field_data_field_rfc_provider.field_rfc_provider_target_id = users_field_data_field_rfc_provider.uid');
      $query->leftJoin('field_data_field_profile_name', 'users_field_data_field_rfc_provider__field_data_field_profile_name', 'users_field_data_field_rfc_provider.uid = users_field_data_field_rfc_provider__field_data_field_profile_name.entity_id');
      $query->leftJoin('field_data_field_rfc_new_course_name', 'field_data_field_rfc_new_course_name', 'e.entityform_id = field_data_field_rfc_new_course_name.entity_id');
      $query->leftJoin('field_data_field_rfc_course', 'field_data_field_rfc_course', 'e.entityform_id = field_data_field_rfc_course.entity_id');
      $query->leftJoin('node', 'node_field_data_field_rfc_course', 'field_data_field_rfc_course.field_rfc_course_target_id = node_field_data_field_rfc_course.nid');

      $query->addExpression("CONCAT_WS(' ', e.entityform_id, ' ', field_data_field_rfc_school.field_rfc_school_target_id, ' ', field_data_field_rfc_name.field_rfc_name_value, ' ', field_data_field_rfc_provider.field_rfc_provider_target_id, ' ', field_data_field_rfc_new_course_name.field_rfc_new_course_name_value, ' ', field_data_field_rfc_course.field_rfc_course_target_id, ' ', users_field_data_field_rfc_school__field_data_field_profile_name.field_profile_name_value, ' ', users_field_data_field_rfc_provider__field_data_field_profile_name.field_profile_name_value, ' ', node_field_data_field_rfc_course.title)", 'combined_fields');

      $query->havingCondition('combined_fields', '%'.$params['combine'].'%', 'LIKE');

      $query->addField('ra', 'field_rfc_requested_amount_value', 'requested_amount');
      $query->addField('ga', 'field_rfc_granted_amount_value', 'granted_amount');
      $query->addField('sa', 'field_rfc_spent_amount_value', 'spent_amount');

      $result = $query->execute()->fetchAll();
      foreach ($result as $row) {
        $requested_amount+= floatval($row->requested_amount);
        $granted_amount+= floatval($row->granted_amount);
        $spent_amount+= floatval($row->spent_amount);
      }

    } else {
      $query->addExpression('SUM(field_rfc_requested_amount_value)', 'requested_amount');
      $query->addExpression('SUM(field_rfc_granted_amount_value)', 'granted_amount');
      $query->addExpression('SUM(field_rfc_spent_amount_value)', 'spent_amount');
      $result = $query->execute()->fetchAll();
      $result = reset($result);
      $requested_amount = $result->requested_amount;
      $granted_amount = $result->granted_amount;
      $spent_amount = $result->spent_amount;

    }

    $block['content'].='<p>Ansøgt sum: <b>'.number_format($requested_amount, 2, ',', '.').' kr.</b> - Bevilget sum: <b>'.number_format($granted_amount, 2, ',', '.').' kr.</b> - Forbrugt sum: <b>'.number_format($spent_amount, 2, ',', '.').'kr.</b></p>';
    return $block;
  }
}

/**
 * Implements hook_views_pre_render().
 */
function ulf_free_course_request_views_pre_render(&$view)
{
  if($view->name == 'ulf_free_course_requests') {
    foreach ($view->result as $value) {
      $time = $value->field_field_rfc_date_1[0]['raw']['value'];
      $year = date('Y', $time);
      $month = date('m', $time);
      if($month < 7) {
        $string = '2. halvår '.($year - 1).'/'.$year;
      } else {
        $string = '1. halvår '.$year.'/'.($year + 1);
      }
      $value->field_field_rfc_date_1[0]['rendered']['#markup'] = $string;
    }
  }
}

/**
 * Implements hook_entityform_access_alter().
 */
function ulf_free_course_request_entityform_access_alter(&$access, $op, $context) {
  $account = $context['account'];
  $entityform = $context['entityform'];
  if (!$access && $op == 'edit' && isset($entityform->uid) && $account->uid == $entityform->uid) {
    $status = $entityform->field_rfc_status[LANGUAGE_NONE][0]['value'];
    if ($status == 'accepted' || $status == 'awaiting_payment') {
      $access = TRUE;
    }
  }
}

/**
 * Implements hook_preprocess_user_profile().
 */
function ulf_free_course_request_preprocess_user_profile(&$variables) {
  foreach ($variables['elements']['#account']->roles as $role) {
    $filter = '![^abcdefghijklmnopqrstuvwxyz0-9-_]+!s';
    $string_clean = preg_replace($filter, '-', drupal_strtolower($role));
    $variables['theme_hook_suggestions'][] =  'user_profile__' . $string_clean;
  }
}

/**
 * Implements hook_theme_registry_alter().
 */
function ulf_free_course_request_theme_registry_alter(&$theme_registry) {
  // Defined path to the current module.
  $module_path = drupal_get_path('module', 'ulf_free_course_request');
  // Find all .tpl.php files in this module's folder recursively.
  $template_file_objects = drupal_find_theme_templates($theme_registry, '.tpl.php', $module_path);
  // Iterate through all found template file objects.
  foreach ($template_file_objects as $key => $template_file_object) {
    // If the template has not already been overridden by a theme.
    if (!isset($theme_registry[$key]['theme path']) || !preg_match('#/themes/#', $theme_registry[$key]['theme path'])) {
      // Alter the theme path and template elements.
      $theme_registry[$key]['theme path'] = $module_path;
      $theme_registry[$key] = array_merge($theme_registry[$key], $template_file_object);
      $theme_registry[$key]['type'] = 'module';
    }
  }
}

/**
 * Change the entiyform after it has been inserted into db.
 * Also send mails.
 *
 * @param $entity
 * @param $entity_type
 */
function ulf_free_course_request_entity_postinsert($entity, $entity_type) {
  if ($entity_type == 'entityform') {
    if ($entity->type == 'free_course_request') {
      // Set author to choice of school.
      $entity->uid = $entity->field_rfc_school['und'][0]['target_id'];
      entityform_save($entity);

      $wrapper = entity_metadata_wrapper($entity_type, $entity);
      _rfc_notify($wrapper, 'on_submit_user');
      _rfc_notify($wrapper, 'on_submit_admin');
    }
  }
}


/**
 * Act after entiyform has been changed.
 *
 * @param $entity
 * @param $entity_type
 */
function ulf_free_course_request_entity_postupdate($entity, $entity_type) {
  // Ensure we are submitting an entityform from form view.
  if ($entity_type == 'entityform' && arg(2) == 'edit') {
    if ($entity->type == 'free_course_request') {
      if ($entity->field_rfc_send_mail[LANGUAGE_NONE][0]['value'] == TRUE) {
        $wrapper = entity_metadata_wrapper($entity_type, $entity);
        if ($entity->field_rfc_status[LANGUAGE_NONE][0]['value'] == 'accepted') {
          _rfc_notify($wrapper, 'on_change_accepted');
        }
        if ($entity->field_rfc_status[LANGUAGE_NONE][0]['value'] == 'refused') {
          _rfc_notify($wrapper, 'on_change_refused');
        }
      }
      // Log the user that changed the entity
      global $user;
      $wrapper->field_rfc_latest_editor = $user->uid;
      $wrapper->save();
      if(!in_array('editor', $user->roles)) {
        drupal_goto('admin/udgiftsdaekning/ansoegninger/'.$user->uid);
      } else {
        drupal_goto('admin/config/system/free_course_request');
      }
    }
  }
}

/**
 * Implements hook_menu_local_tasks_alter().
 */
function ulf_free_course_request_menu_local_tasks_alter(&$data, $router_item, $root_path)
{

  if($root_path == 'entityform/%/edit') {
    global $user;
    if(in_array('skole', $user->roles)) {
      $data['tabs'][0]['output'] = [];
      $data['tabs'][0]['count'] = 0;
    }
  }
}
